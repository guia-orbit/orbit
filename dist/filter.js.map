{
  "version": 3,
  "sources": ["../src/filter.ts"],
  "sourcesContent": ["\n/*\n * ORBIT \n * Filter Utilities \n * \n */ \n\n//import { AdjustTrackingUrl } from './adjust';\n\n// Global object\nwindow['Orbit'] = window['Orbit'] || {}; \nvar Orbit = window['Orbit'];\n\nexport class Filter {\n\n    readonly fsCmsFilterField: string = \"data\";\n\n    constructor() {\n    }\n\n    // Parses string date in D/M/Y format\n    // Returns a date object  \n    parseDate(dateString) {\n        let [day, month, year] = dateString.split(/\\/|-/).map(Number);\n        let d = new Date(Date.UTC(year, month - 1, day)); // JavaScript counts months from 0\n    //console.log(\"date parsed\", d, dateString); \n        return d;\n    } \n\n    // Returns an array of dates parsed from a text string\n    // D/M/Y format, delimited by spaces, line breaks or commas \n    getDatesList(text) {\n        var data = text; // $(this).text();\n    //    console.log (data);\n    \n        if(!data) return null;\n        \n        let dateString = data; // \"2023-01-01,2023-01-02,2023-01-03\";\n        let dateStringArray = dateString.split(/[\\s,]+/);\n    //  console.log(\"getDatesList\", dateStringArray); \n        let dateArray = dateStringArray.map(date => {\n            let d = this.parseDate(date);\n    //      console.log(\"dateparsed\", d);\n            if (isNaN(d.getTime()))\n            console.error(\"invalid date\", date);\n            return d;\n        }); // new Date(date));\n        // console.log(\"dateArray\", dateArray); \n        dateArray[0]\n        return dateArray;    \n    }\n\n    // Returns a date array for a weekday-restricted range\n    getDatesByWeekdays(start, end, weekdayNames) {\n        \n        const weekdays: string[] = weekdayNames.split(/[\\s,]+/); \n        //['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']; // assuming this as an example\n//            const weekdayToNumber: { [key: string]: number } = { 'Sunday': 0, 'Monday': 1, 'Tuesday': 2, 'Wednesday': 3, 'Thursday': 4, 'Friday': 5, 'Saturday': 6 }; // assuming this as an example\n        \n//          var weekdays = weekdayNames.split(/[\\s,]+/); \n    \n        const weekdayToNumber: { [key: string]: number } = {\n            \"seg\": 1,\n            \"ter\": 2,\n            \"qua\": 3,\n            \"qui\": 4,\n            \"sex\": 5,\n            \"sab\": 6,\n            \"dom\": 0,\n        };\n    \n        const dates: Date[] = [];\n        let currentDate: Date = new Date(start.getTime()); // clone the date to avoid modifying original\n    \n        while (currentDate <= end) {\n            if (weekdays.includes(Object.keys(weekdayToNumber)[currentDate.getDay()])) {\n                dates.push(new Date(currentDate));\n            }\n            currentDate.setDate(currentDate.getDate() + 1); // move to the next day\n        }\n    \n        return dates;\n    }\n        \n    // Create the Filter HTML for a Date Range\n    createFilterRangeHtml(dateStart, dateEnd) {\n    \n        // Create list of date elements\n        let isoDateStart = dateStart.toISOString().split('T')[0] + 'T00:00:00+00:00';\n        let isoDateEnd = dateEnd.toISOString().split('T')[0] + 'T00:00:00+00:00';\n    \n        let html = ``;\n        \n    //  console.error(\"check\", dateStart, dateEnd); \n        \n        if (dateStart.getTime() == dateEnd.getTime()) {\n        \n            // https://finsweet.com/attributes/cms-filter\n            html = \n                `<li>Exact: <span fs-cmsfilter-field=\"${this.fsCmsFilterField}\" fs-cmsfilter-type=\"date\">${isoDateStart}</span></li>`;\n        \n        } else {\n        \n            // https://finsweet.com/attributes/cms-filter\n            html = \n                `<li>From: <span fs-cmsfilter-field=\"${this.fsCmsFilterField}\" fs-cmsfilter-type=\"date\" fs-cmsfilter-range=\"from\">${isoDateStart}</span></li>` +\n                `<li>To: <span fs-cmsfilter-field=\"${this.fsCmsFilterField}\" fs-cmsfilter-type=\"date\" fs-cmsfilter-range=\"to\">${isoDateEnd}</span></li>`;\n    \n        }\n    \n        html = `<div filter-data><ul>${html}</li></div>`;\n        \n    //  console.log(html);\n    \n        return html;  \n    }\n    \n    validDateArray(dateArray) {\n        \n        return dateArray.filter(d => !isNaN(d.getTime()));\n    }\n    \n    // Create the Filter HTML for a Date Array\n    createFilterHtml(dateArray) {\n    \n    //  console.log(\"createFilterHtml\", dateArray);\n        \n        // Create list of date elements \n        // https://finsweet.com/attributes/cms-filter\n        dateArray = this.validDateArray(dateArray); \n        \n    //  console.log(\"valid createFilterHtml\", dateArray);\n        \n        let htmlLines = dateArray.map(date => {\n        \n    //        console.error(\"invalid date\", date);\n        \n    //    console.log(\"date\", date, date.toISOString()); \n        \n        let isoDate = date.toISOString().split('T')[0] + 'T00:00:00+00:00';\n        return `<li>Date: <span fs-cmsfilter-field=\"${this.fsCmsFilterField}\" fs-cmsfilter-type=\"date\">${isoDate}</span></li>`;\n        });\n    \n        let html = htmlLines.join('\\n');\n    \n        html = `<div filter-data><ul>${html}</li></div>`;\n        \n    //  console.log(html);\n    \n        return html;  \n    }\n          \n    preparePageFilterData() {\n    \n        // Remove any conditionally filtered elements permanently\n        // as these will confuse FS CMS Filter\n//          $(\".w-condition-invisible\").remove();\n\n//          Array.from(document.querySelectorAll(\".w-condition-invisible\")).forEach((element: Element) => {\n        document.querySelectorAll(\".w-condition-invisible\").forEach((element: Element) => {\n            element.remove();\n        });\n        \n//            Array.from(document.querySelectorAll(\"[date-rule]\")).forEach((element: Element) => {\n        document.querySelectorAll(\"[date-rule]\").forEach((element: Element) => {\n            \n//          $(\"[date-rule]\").each(function() {\n        \n//                var $this = $(this);\n            var dateRuleType = element.getAttribute(\"date-rule\");\n        \n            // Skip if no content \n            if(!element.textContent)\n                return;\n\n\n//                console.log($this.text())\n            var json = JSON.parse(element.textContent);\n            var html;\n        \n            switch(dateRuleType) {\n                \n                case \"list\":\n            \n                    console.log(json.dates);\n                    \n                    var dateArray: Date[] = this.getDatesList(json.dates); \n            //        console.log(dateArray);\n                    \n                    html = this.createFilterHtml(dateArray);\n                    \n                    // Replace the entire element\n                    element.replaceWith(html);\n                    \n                    break;\n                \n                case \"range\":\n                    json.fromDate = new Date(json.from);\n                    json.toDate = new Date(json.to);\n            \n                    html = this.createFilterRangeHtml(json.fromDate, json.toDate);\n                    \n                    element.replaceWith(html);\n                    \n                    break; \n                case \"restricted-range\":\n                    json.fromDate = new Date(json.from);\n                    json.toDate = new Date(json.to);\n                    \n                    console.log(json);\n            \n                    var dateArray: Date[] = this.getDatesByWeekdays(json.fromDate, json.toDate, json.days); \n            //        console.log(dateArray);\n                    \n                    html = this.createFilterHtml(dateArray);\n            \n                    element.replaceWith(html);\n                    \n                    break;\n                default:\n                    console.warn (`Unknown date rule ${dateRuleType}`);  \n                    break;\n            }\n            \n        });\n        \n        \n        \n        // Temporary date picker using HTML5 \n        //  $(\"#date1\").attr(\"type\", \"date\");\n        \n    \n        \n    } \n    \n    init() {\n        \n        // Clicked on Apagar\n        // Use FS Filter reset for this field but also clear the Flatpickr element. \n\n        // Get all elements with attribute fs-cmsfilter-reset=data\n        const elements = document.querySelectorAll(\"[fs-cmsfilter-reset=data]\");\n\n        // Add click event listener to each element\n        elements.forEach((element: Element) => {\n            element.addEventListener('click', function() {\n                // Get flatpickr instance from element with id 'date'\n                const dateElement = document.getElementById('date') as any;\n                const fp = dateElement?._flatpickr;\n\n                // Clear the flatpickr instance\n                if(fp) {\n                    fp.clear();\n                }\n            });\n        });\n\n    }\n\n}\n\n    \n    \n\n    \n    \n    \n    "],
  "mappings": "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",
  "names": []
}
